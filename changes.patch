diff --git a/z3/src/solver.rs b/z3/src/solver.rs
index 282cfa2..e24c83a 100644
--- a/z3/src/solver.rs
+++ b/z3/src/solver.rs
@@ -39,6 +39,13 @@ impl<'ctx> Solver<'ctx> {
     /// `solver2_unknown`, and `ignore_solver1` parameters of the combined
     /// solver to change its behaviour.
     ///
+    /// The function [`Solver::get_model()`] retrieves a model if the
+    /// assertions is satisfiable (i.e., the result is
+    /// `SatResult::Sat`) and [model construction is enabled].
+    /// The function [`Solver::get_model()`] can also be used even
+    /// if the result is `SatResult::Unknown`, but the returned model
+    /// is not guaranteed to satisfy quantified assertions.
+    ///
     /// [model construction is enabled]: crate::Config::set_model_generation
     pub fn new(ctx: &'ctx Context) -> Solver<'ctx> {
         unsafe { Self::wrap(ctx, Z3_mk_solver(ctx.z3_ctx)) }
@@ -296,13 +303,6 @@ impl<'ctx> Solver<'ctx> {
 
     /// Retrieve the model for the last [`Solver::check()`]
     /// or [`Solver::check_assumptions()`].
-    ///    
-    /// The function [`Solver::get_model()`] retrieves a model if the
-    /// assertions is satisfiable (i.e., the result is
-    /// `SatResult::Sat`) and [model construction is enabled].
-    /// The function [`Solver::get_model()`] can also be used even
-    /// if the result is `SatResult::Unknown`, but the returned model
-    /// is not guaranteed to satisfy quantified assertions.
     ///
     /// The error handler is invoked if a model is not available because
     /// the commands above were not invoked for the given solver, or if
